package application;

import java.io.IOException;

import javafx.application.Application;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class CalcView extends Application {
  @FXML // fx:id="button"
  private Button button; // Value injected by FXMLLoader
  
  @FXML // fx:id="question"
  private TextField question; // Value injected by FXMLLoader
  
  @FXML // fx:id="answer"
  private Label answer; // Value injected by FXMLLoader

  @FXML // fx:id="postfixButton"
  private RadioButton postfixButton; // Value injected by FXMLLoader

  @FXML // fx:id="radioGroup"
  private ToggleGroup radioGroup; // Value injected by FXMLLoader

  @FXML // fx:id="infixButton"
  private RadioButton infixButton; // Value injected by FXMLLoader
  
  /////////////////////////////////////////////////////////////////////////////////
  // Block for creating an instance variable for others to use.
  //
  // Make it a JavaFX singleton.  Instance is set by the javafx "initialise" method
  private volatile static CalcView instance = null;

  @FXML
  void initialize() {
    instance = this;
  }

  public synchronized static CalcView getInstance() {
    if (instance == null) {
      new Thread(() -> Application.launch(CalcView.class)).start();
      // Wait until the instance is ready since initialise has executed.
      while (instance == null) {// empty body
      }
    }

    return instance;
  }
  // End of special block
  /////////////////////////////////////////////////////////////////////////////////
  
  @Override
  public void start(Stage primaryStage) throws IOException {
    Parent page = FXMLLoader.load(application.CalcView.class.getResource("Sample.fxml"));
    Scene scene = new Scene(page);
    scene.getStylesheets().add(
        getClass().getResource("application.css").toExternalForm());
    primaryStage.setScene(scene);
    primaryStage.setTitle("Calculator");
    primaryStage.show();
  }  
  
  // Methods for registering an observer and for
  // accessing user data in the UI
  public void addEvaluateListener(Observer f) {
    button.setOnAction(event -> f.tell());
  }
  
  public String getUserInput() {
    return question.getText();
  }
  
  public void setText(String newTotal) {
    answer.setText(newTotal);
  }
}
