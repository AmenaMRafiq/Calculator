package model;

/**
 * OpStack class represents stack of symbol values.
 * This acts as a facade to assist Shunting Algorithm class.
 * 
 * @author Amena Rafiq
 * @see    Stack Entry Symbol
 *
 */
public class OpStack {
  
  private Stack opStack = new Stack();
  
  public boolean isEmpty() {
    return opStack.isEmpty();
  }
  
  /**
   * Pushes an Entry object with a symbol on top of the stack. In doing so, the 
   * size of the stack is incremented.
   *
   * @param s     the symbol to be pushed onto the stack as a Entry object
   * @see         Stack Entry Symbol
   */
  public void push(Symbol s) {
    Entry entry = new Entry(s);
    opStack.push(entry);
  }

  public int size() {
    // TODO Auto-generated method stub
    return opStack.size();
  }
  
  /**
   * Returns the symbol of and removes the Entry object that was at the top of the stack. 
   * The size of the stack is decremented. 
   *
   * @return                            the symbol of the Entry object at the top of the stack
   * @throws IndexOutOfBoundsException  if the stack does not contain any entries, an exception 
   *                                    is thrown to indicate that the stack is empty
   * @see                               IndexOutOfBoundsException Entry
   */
  public Symbol pop() throws IndexOutOfBoundsException, BadTypeException {
    if (isEmpty()) {
      throw new IndexOutOfBoundsException("Exception: OpStack is Empty");
    }
    return opStack.pop().getSymbol(); 
  }
  
}
